/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { Decal, PerspectiveCamera, RenderTexture, Text, useGLTF, useTexture } from "@react-three/drei";
import { Color } from "three";
import { useControls } from "leva";
import { useFrame } from "@react-three/fiber";

export default function Hand(props) {
  // const { nodes, materials } = useGLTF("./models/hand.glb");
  const { nodes, materials } = useGLTF("./models/mergedHand.glb");
  // console.log(nodes)
  // console.log(materials)

  // Decal debug
  // const decalProp = useControls('P2decalProp', {
  const decalProp = useControls('海报二手部贴花属性', {

    // position: {
    位置: {
        value: { x: -2.52, y: -4.16, z: 5.65 },
        min: -10,
        max: 10,
        step: 0.01
    },

    // rotation: {
    旋转: {
        value: { x: -0.59, y: 2.02, z: 1.98 },
        min: -Math.PI,
        max: Math.PI,
        step: 0.01
    },

    // scale: {
    大小: {
        value: { x: 11.5, y: 2.6, z: 3.6 },
        min: 0,
        max: 25,
        step: 0.1
    },

    // color: '#eee',
    颜色: '#eee',

    // anisotropy: {
    //     value: 16,
    //     min: 2,
    //     max: 32,
    //     step: 2
    // }
  })

//   const renderTexProp = useControls('P2renderTex', {
//     anisotropy: {
//         value: 36,
//         min: 2,
//         max: 256,
//         step: 2
//     }
// })

  const tex = useTexture("./refImgs/reference1.jpg")
  
  // const decalRef = useRef()
  const textRef = useRef()

  useFrame((state) => {
    const elapsed = state.clock.elapsedTime
    textRef.current.position.x = - Math.tan(elapsed)
  })

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.hand.geometry}
      >
      <meshStandardMaterial color='white' roughness={1} metalness={0} />
        <Decal 
          // debug 
          // position={[decalProp.position.x, decalProp.position.y, decalProp.position.z]} 
          // rotation={[decalProp.rotation.x, decalProp.rotation.y, decalProp.rotation.z]}
          // scale={[decalProp.scale.x, decalProp.scale.y, decalProp.scale.z]}
          position={[decalProp.位置.x, decalProp.位置.y, decalProp.位置.z]} 
          rotation={[decalProp.旋转.x, decalProp.旋转.y, decalProp.旋转.z]}
          scale={[decalProp.大小.x, decalProp.大小.y, decalProp.大小.z]}
          // scale={[.9, .25, 1]}
          // ref={decalRef} 
        >
          <meshBasicMaterial transparent polygonOffset opacity={5} >
          {/* <meshStandardMaterial roughness={0.6} transparent polygonOffset polygonOffsetFactor={-10}> */}
              {/* <pointLight /> */}
            <RenderTexture 
              attach="map" 
              // anisotropy={renderTexProp.anisotropy}
            >
              {/* <PerspectiveCamera makeDefault manual aspect={decalProp.scale.x / decalProp.scale.y} position={[0, 0, 2]} /> */}
              <PerspectiveCamera makeDefault manual aspect={decalProp.大小.x / decalProp.大小.y} position={[0, 0, 2]} />
              {/* <color attach="background" args={['transparent']} /> */}
              {/* <Text ref={textRef} rotation={[Math.PI, 0, 0]} font="./fonts/Astrolab.woff" fontSize={.7} color={decalProp.color} > */}
              <Text ref={textRef} rotation={[Math.PI, 0, 0]} font="./fonts/Astrolab.woff" fontSize={.7} color={decalProp.颜色} >
                ON Mar. 24, 25, 26 2024
              </Text>
            </RenderTexture>
          {/* </meshStandardMaterial> */}
          </meshBasicMaterial>
        </Decal>

        {/* 
          Ref img decal test 
        */}
        {/* <Decal 
          debug 
          map={tex} 
          // position={[.5, 0, 0]} 
          position={[decalProp.position.x, decalProp.position.y, decalProp.position.z]}
          rotation={[decalProp.rotation.x, decalProp.rotation.y, decalProp.rotation.z]}
          map-anisotropy={decalProp.anisotropy}
        /> */}
    </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.thumbNail.geometry}
      >
        <meshStandardMaterial color='white' roughness={.2} metalness={.5} />
        {/* <Decal 
          debug
          // position={[-1.0, 1.75, 0.6]} 
          position={[0, 0, 0]} 
          rotation={-0.7} 
          scale={0.25} 
          map={tex} 
          map-anisotropy={16} 
        /> */}
      </mesh>


      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.indexNail.geometry}
        material={nodes.indexNail.material}
        >
        <meshStandardMaterial color='white' roughness={.2} metalness={.5} />
      </mesh>

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.middleNail.geometry}
        material={nodes.middleNail.material}
      >
        <meshStandardMaterial color='white' roughness={.2} metalness={.5} />
      </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.namelessNail.geometry}
        material={nodes.namelessNail.material}
      >
        <meshStandardMaterial color='white' roughness={.2} metalness={.5} />
      </mesh>

      <mesh
        // castShadow
        // receiveShadow
        geometry={nodes.smallNail.geometry}
        material={nodes.smallNail.material}
      >
        <meshStandardMaterial color='white' roughness={.2} metalness={.5} />
      </mesh>

    </group>
  );
}

useGLTF.preload("./models/hand.glb");
